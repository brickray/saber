def fib(a)
	if a == 1 || a == 0 then
		return 1
	end

	return fib(a - 1) + fib(a - 2)
end

tb = {"fib" = fib, 
      "fibp" = 10, 
      "iter" = def(key, value) print(key, value) end
     } //create a table

print(tb.fib(tb.fibp), table.len(tb))
table.foreach(tb, tb.iter) //traverse table

str = "asdfasdfasf"
string.foreach(str, tb.iter)

func = load("a = 5 if a == 5 then return 'return 3' else return 'return 7' end")
iter = def (k,v) if v == "a" then print("haha") else print("hihi") end end
print(func())
string.foreach(str, iter)
print(-5*10.5)

def AA(n1, ...)
	local a = 4
	local b = 11
	local c = 44
	print(args.num, n1)
	local i
	for i = 0, i < args.num, i = i + 1 do
		print(args[i])
	end
end

AA("SSS", "BBB", 1,2,3,4,5,6,7,8)
AA("SSS", "BBB")

if true then
	print("asdf")
end

def add (a, ...)
	 ret = a
	 
	for i = 0, i < args.num, i = i +1 do
		ret = ret + args[i]
	end

	return ret
end

local t = test.create()
t.setx(1)
t.sety(2)
local t1 = test.create()
t1.setx(5)
t1.sety(10)
print(t1.add(), t.add())

/*def foo (a)
	print("foo", a)
	return coroutine.yield(2*a)
end

def func(a,b)
    print("co-body1", a, b)
    local r = foo(a+1)
    print("co-body2", r)
    local s = coroutine.yield(a+b)
    print("co-body3", s)
    return b
end

co = coroutine.create(func)
	
print("1----")
print(coroutine.resume(co, 1, 10), "main")
print("2----")
print(coroutine.resume(co, "r"), "main")
print("3----")
print(coroutine.resume(co, "dd"), "main")
print(coroutine.status(co))
print(coroutine.resume(co, "dd"), "main")



def func()
	print("co-body1")
	coroutine.yield()
	print("co-body2")
	def A(...)
	print(args[0], args[1])
		print("next co-body1")
		coroutine.yield()
		print("next co-body2")
		coroutine.yield()
		print("next co-body3")
	end
	def B()
		print("es3")
		coroutine.yield()
		print("es5")
	end
	local co = coroutine.create(A)
	local co1 = coroutine.create(B)
	coroutine.resume(co, "...", "as")
	print("next-resume1")
	coroutine.yield()
	coroutine.resume(co1)
	print("es3-resume")
	coroutine.resume(co)
	print("next-resume2")
	coroutine.resume(co)
	print("next-resume3")
	coroutine.resume(co1)
	print("es5-resume")
end

co = coroutine.create(func)
coroutine.resume(co)
print("resume1")
coroutine.resume(co)
print("resume2")
coroutine.resume(co)
print("resume3")*/

def counter(a)
	local cc = 10
	def A()
		cc += 1
		print(cc)
	end
	def B()
		cc += 2
		print(cc)
	end
	if a > 0 then
		return A
	else
		return B
	end
end

a = counter(-1)
a()
a()
a()
a()
b = counter(1)
b()
b()
b()
b()

ttb = {"x" = {"y" = def () return 3 end, "z"="!@3"}, "z" = 123}
print(ttb.z, ttb.x, ttb.x.y(), ttb.x.z)

def seqg(n)
	local i = 1
	while i <= n do
		coroutine.yield(i)
		i = i + 1
	end
	return i
end

local co = coroutine.create(seqg)

while true do
	local ret = coroutine.resume(co, 10)
    print(ret)
	if ret == false then
		break
	end
end

def send(p)
	print("product send : ", p)
	coroutine.yield(p)
end

def func()
	local p
	while true do
		p = io.input()
		send(p)
	end
end
local product = coroutine.create(func)

def receive(co)
	local res = coroutine.resume(co)
	if res then
		print("consumer received : ", res)
	else
		print("consumer receive failed : ", res)
	end
end

def consumer(co)
	while true do
		receive(co)
	end
end
consumer(product)








