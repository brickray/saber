def fib(a)
	if a == 1 || a == 0 then
		return 1
	end

	return fib(a - 1) + fib(a - 2)
end

tb = {} //create a table
tb.fib = fib //fibonacci
tb.fibp = 10
tb.iter = def (...) print(args[0], args[1]) end //table iteration function
tb[2] = 3

print(tb.fib(tb.fibp), table.len(tb))
table.foreach(tb, tb.iter) //traverse table

str = "asdfasdfasf"
string.foreach(str, tb.iter)

func = load("a = 5 if a == 5 then return 'return 3' else return 'return 7' end")
iter = def (k,v) if v == "a" then print("haha") else print("hihi") end end
print(func())
string.foreach(str, iter)
print(-5*10.5)

def AA(n1, ...)
	local a = 4
	local b = 11
	local c = 44
	print(args.num, n1)
	local i
	for i = 0, i < args.num, i = i + 1 do
		print(args[tb[2]])
	end
end

AA("SSS", "BBB", 1,2,3,4,5,6,7,8)
AA("SSS", "BBB")

if true then
	print("asdf")
end

def add (a, ...)
	 ret = a
	 
	for i = 0, i < args.num, i = i +1 do
		ret = ret + args[i]
	end

	return ret
end

local t = test.create()
test.setx(t, 1)
test.sety(t, 2)
print(test.add(t))

/*def foo (a)
	print("foo", a)
	return coroutine.yield(2*a)
end

def func(a,b)
   print("co-body1", a, b)
   local r = foo(a+1)
   print("co-body2", r)
   local s = coroutine.yield(a+b)
   print("co-body3", s)
   return b
end

co = coroutine.create(func)
	
print("1----")
print(coroutine.resume(co, 1, 10), "main")
print("2----")
print(coroutine.resume(co, "r"), "main")
print("3----")
print(coroutine.resume(co, "dd"), "main")
print("4----")
print(coroutine.resume(co, "x"), "main")*/

def func()
	print("co-body1")
	coroutine.yield()
	def A()
		print("next-co-body1")
		coroutine.yield()
		print("next-co-body2")
		coroutine.yield()
		print("next-co-body3")
	end
	local co = coroutine.create(A)
	coroutine.resume(co)
	print("next-co-resume1")
	coroutine.resume(co)
	print("next-co-resume2")
	coroutine.resume(co)
	print("next-co-resume3")
end

co = coroutine.create(func)
coroutine.resume(co)
print("resume1")
coroutine.resume(co)
print("resume2")










